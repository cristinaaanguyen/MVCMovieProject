@model Project1.ViewModels.MovieFormViewModel

@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@if (Model.Title != "Edit Movie")
{

    <h2>Movie Form</h2>
}

else
{
    <h2>Movie Form</h2>
}

    <div class="row">
        <div class="col-md-3">
            
            @using (Html.BeginForm("Save", "Movies"))
            {

                <div class="form-group">

                    @Html.LabelFor(m => m.Movie.Name) <!--pass lambda expression that specifies name of target property used in this form, in this case Customer model...expression: m as in model goes to m.Name; so when razor view engines renders view it'll look at this name property and use this as value for html label-->
                    @Html.TextBoxFor(m => m.Movie.Name, new { @class = "form-control" }) <!-- can pass an anonymous obj, and anything we pass to it will be considered an html attribute so if we wanna add a class..-->
                </div>

                <div class="form-group">

                    @Html.LabelFor(m => m.Movie.ReleaseDate) <!--pass lambda expression that specifies name of target property used in this form, in this case Customer model...expression: m as in model goes to m.Name; so when razor view engines renders view it'll look at this name property and use this as value for html label-->
                    @Html.TextBoxFor(m => m.Movie.ReleaseDate, new { @class = "form-control" }) <!-- can pass an anonymous obj, and anything we pass to it will be considered an html attribute so if we wanna add a class..-->
                </div>

                <div class="form-group">

                    @Html.LabelFor(m => m.Movie.GenreId)
                    @Html.DropDownListFor(m => m.Movie.GenreId, new SelectList(Model.Genres, "Id", "Name"), "Select Genre", new { @class = "form-control" })
                </div>


                <div class="form-group">

                    @Html.LabelFor(m => m.Movie.NumberInStock) <!--pass lambda expression that specifies name of target property used in this form, in this case Customer model...expression: m as in model goes to m.Name; so when razor view engines renders view it'll look at this name property and use this as value for html label-->
                    @Html.TextBoxFor(m => m.Movie.NumberInStock, new { @class = "form-control" }) <!-- can pass an anonymous obj, and anything we pass to it will be considered an html attribute so if we wanna add a class..-->
                </div>

                @Html.HiddenFor(m => m.Movie.Id) <!-- need to add ID as hidden field  -->
                @Html.AntiForgeryToken()

                <button type="submit" class="btn btn-primary">Save</button>

                if (Model.Title == "Edit Movie")
                {

                    <input type="button" value="Delete" class="btn btn-danger pull-right" onclick="location.href='@Url.Action("DeleteMovie", "Movies", new { id = Model.Movie.Id} )'" />

                }


            }




        </div>
    </div>